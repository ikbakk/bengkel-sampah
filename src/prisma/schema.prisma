// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID       String        @id @default(uuid())
  phoneNumber  String        @unique
  passwordHash String
  name         String
  address      String?
  role         Role          @default(CUSTOMER)
  customer     Customer?
  driver       Driver?
  email        String?       @unique
  member       Member?
  transactions Transaction[]
  cart Cart?
  createdAt    DateTime      @default(now())
}

model Customer {
  customerID String @id @default(uuid())
  balance    Int    @default(0)
  userID     String @unique
  user       User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model Driver {
  driverID     String        @id @default(uuid())
  driverStatus Driver_Status @default(ACTIVE)
  userID       String        @unique
  user         User          @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model Partner {
  partnerID   String @id @default(uuid())
  address     String
  phoneNumber String
  name        String

  transactions Transaction[]
}

model Member {
  memberID    String     @id @default(uuid())
  wasteBankID String
  wasteBank   Waste_Bank @relation(fields: [wasteBankID], references: [wasteBankID], onDelete: Cascade)
  balance     Int        @default(0)
  userID      String     @unique
  user        User       @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model Transaction {
  transactionID   String             @id @default(uuid())
  status          Transaction_Status @default(READY)
  userID          String
  user            User               @relation(fields: [userID], references: [userID], onDelete: Cascade)
  transactionDate DateTime           @default(now())

  wasteSubmission Waste_Submission[]

  source      Transaction_Source
  partner     Partner?           @relation(fields: [partnerID], references: [partnerID], onDelete: Cascade)
  partnerID   String?
  wasteBank   Waste_Bank?        @relation(fields: [wasteBankID], references: [wasteBankID], onDelete: Cascade)
  wasteBankID String?
}

model Waste {
  wasteID   String     @id @default(uuid())
  name      String
  price     Float
  wasteType Waste_Type
  unit      String

  wasteSubmission Waste_Submission[]
  cartItem Cart_Item[]
}

model Waste_Submission {
  wasteSubmissionID String      @id @default(uuid())
  transactionID     String      
  transaction       Transaction @relation(fields: [transactionID], references: [transactionID], onDelete: Cascade)
  wasteID           String
  waste             Waste       @relation(fields: [wasteID], references: [wasteID])
  totalWeight       Float
  totalPrice        Float
}

model Waste_Bank {
  wasteBankID  String        @id @default(uuid())
  name         String
  address      String
  members      Member[]
  transactions Transaction[]
}


model News {
  newsID    String   @id @default(uuid())
  title     String
  imageUrl  String
  imageDesc String
  content   String
  author    String   @default("ADMIN")
  createdAt DateTime @default(now())
}


model Cart {
  cartID String @id @default(uuid())
  userID String @unique
  user   User @relation(fields: [userID], references: [userID])
  cartItems Cart_Item[]
  createdAt DateTime @default(now())
}

model Cart_Item {
  cartItemID String @id @default(uuid())
  cartID     String
  cart       Cart    @relation(fields: [cartID], references: [cartID])
  price Float
  weight Float
  createdAt  DateTime @default(now())

  wasteID String 
  waste   Waste @relation(fields: [wasteID], references: [wasteID])

  @@unique([cartID, wasteID])
}

model Token {
  token   String @id
  userID  String
  expDate DateTime
}

enum Role {
  ADMIN
  CUSTOMER
  PARTNER
  DRIVER
  MEMBER
}

enum Driver_Status {
  ACTIVE
  INACTIVE
}

enum Transaction_Status {
  READY
  PROCESSING
  COMPLETED
}

enum Transaction_Source {
  DIRECT
  PARTNER
  WASTE_BANK
}

enum Waste_Type {
  ORGANIC
  INORGANIC
}
